#############汇编语言笔记##################
#cpu架构与指令集：
    汇编语言和cpu的指令集合相关。
    不同的cpu有不同的机器语言和汇编语言，而汇编和机器语言是一一对应的a
    64位指令级其对应的cpu的位数、寄存器、地址总线、数据总线也是64位。
    > x86架构：
      向下兼容x86其他指令级
      × x86_16指令级：
        8086cpu
      × x86_32指令级：即IA32指令级=i386
      × x86_64指令级：
        x86_64=x64=amd64=IA32E=EM64T=intel64
    > IA64架构:
        INTEL家自研不向下兼容的64位指令集架构。效率低下。
        如奔腾4以上cpu
    > arm架构：
        移动端cpu使用的架构
#寄存器:
    寄存器是cpu的重要组成部分，是cpu中运算器，控制器和内存交互中间介质。
    程序运行，其代码和数据就会存放在内存上，而cpu中的寄存器则负责从这些内存
    上读取所需的指令和数据暂存在寄存器，cpu从寄存器读取并执行指令和数据，
    处理的结果数据也存放在这些寄存器，接着写入内存。
    控制器/运算器<-------------->寄存器<--------->内存
    x86_64指令级，gcc编译下，各寄存器及其作用：
>通用寄存器：(x86_64,gcc编译)
    x86_64通用寄存器相比x86_32多8个，共计16个通用寄存器。
    rax, eax, ax, ah, al：
            rbx, ebx, bx, bh, bl;
    rcx, ecx, cx, ch, cl;
    rdx, edx, dx, dh, dl;
    rsi, esi, si;
    rdi, edi, di;
    rbp, ebp;
    rsp, esp;
    r8-r15;
    
    GCC中对这些寄存器的调用规则如下：
    
    rax: 作为函数返回值使用;cpu运算所需数据和运算结果保存
    rsp: 栈顶指针寄存器，指向栈顶
    rbp: 栈基指针寄存器，指向当前栈帧的基部
    rip: 程序指令计数器，下一条指令的偏移地址
    rdi，rsi，rdx，rcx，r8，r9:用作函数参数，函数参数从左至右入栈
    rbx，r12，r13，r14，r15 用作数据存储，遵循被调用者使用规则，简单说
    就是随便用，调用子函数之前要备份它，以防他被修改.???
    r10，r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要
    先保存原值.???

#汇编指令：
    mov:
    lea:
    push:
    pop:
    call:
    leav：
    ret:

#寻址方式：
    
#函数栈帧:
    栈向下(向地址)增长，栈帧结构及入栈顺序：
    上一栈帧的rbp值--(从后到先)局部变量1,变量2...--(从右至左)参数1,参数2...--
